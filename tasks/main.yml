---

- name: 'Set broker objects state={{ state }}'
  k8s_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', item) | from_yaml }}"
  with_items:
    - broker.namespace.yaml
    - broker.service.yaml
    - broker.serviceaccount.yaml
    - broker.clusterrolebinding.yaml
    - broker.configmap.yaml

- name: 'Set broker-auth objects state={{ state }}'
  k8s_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', item) | from_yaml }}"
  with_items:
    - broker-auth.clusterrole.yaml
    - broker-auth.clusterrolebinding.yaml
    - broker-auth.secret.yaml

- name: 'Set broker-client objects state={{ state }}'
  k8s_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', item) | from_yaml }}"
  with_items:
    - broker-client.serviceaccount.yaml
    - broker-client.secret.yaml
    - broker-client.clusterrolebinding.yaml

# TODO: Use this when it will work
#- name: 'Set broker clusterresourcedefinitions state={{ state }}'
#  k8s_raw:
#    state: '{{ state }}'
#    definition: "{{ lookup('template', item) | from_yaml }}"
#  with_items:
#    - bundle.crd.yaml
#    - jobstates.crd.yaml
#    - servicebindings.crd.yaml
#    - serviceinstances.crd.yaml
#  when: dao_type == 'crd'
- name: 'Template out cluster resource definition objects'
  template:
    src: "{{ item }}"
    dest: "/tmp/{{ item }}"
  with_items:
    - bundle.crd.yaml
    - jobstates.crd.yaml
    - servicebindings.crd.yaml
    - serviceinstances.crd.yaml
  when: dao_type == 'crd'

- name: 'Use kubectl to {{ kubectl_action}} cluster resource definitions'
  command: kubectl {{ kubectl_action }} -f /tmp/{{ item }}
  register: crd_command
  failed_when: crd_command.rc != 0 and 'AlreadyExists' not in crd_command.stderr
  with_items:
    - bundle.crd.yaml
    - jobstates.crd.yaml
    - servicebindings.crd.yaml
    - serviceinstances.crd.yaml
  when: dao_type == 'crd'

- name: 'Set broker deployment object state={{ state }}'
  openshift_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'broker.deployment.yaml') | from_yaml }}"

- name: 'Set broker-access objects state={{ state }}'
  k8s_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', item) | from_yaml }}"
  with_items:
    - broker-access.clusterrole.yaml

- name: 'Set route state={{ state }}'
  openshift_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'broker.route.yaml') | from_yaml }}"
  when: cluster == 'openshift'

# Until we have the dynamic client, we'll have to kubectl create the clusterservicebroker object
- name: Get certificate authority
  shell: "kubectl get secrets -n {{ broker_namespace }} {{ broker_name }}-client -o yaml | grep service-ca.crt | awk '{ print $2 }'"
  register: cluster_ca
  when: apb_action == 'provision'

- name: Set certificate authority
  set_fact:
    broker_ca_crt: "{{ cluster_ca.stdout }}"
  when: apb_action == 'provision'

- name: 'Template out {{ broker_kind }} object'
  template:
    src: broker.servicecatalog.yaml
    dest: /tmp/broker.servicecatalog.yaml

- name: 'Use kubectl to {{ kubectl_action}} {{ broker_kind }}'
  command: kubectl {{ kubectl_action }} -f /tmp/broker.servicecatalog.yaml
  register: csb_command
  failed_when: csb_command.rc != 0 and 'AlreadyExists' not in csb_command.stderr


