---

- name: 'Check for service catalog'
  command: kubectl api-versions
  register: kapi_versions
  when: apb_action == 'provision'

- name: 'Fail if service-catalog not installed'
  fail:
    msg:
     There is no service catalog api-versions available in this cluster.
     Please install the service catalog and retry.
  when: apb_action == 'provision' and 'servicecatalog.k8s.io' not in kapi_versions.stdout

- name: 'Set broker namespace state={{ state }}'
  k8s_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'broker.namespace.yaml') | from_yaml }}"
  when: create_broker_namespace

- name: 'Get the broker namespace'
  set_fact:
    _broker_namespace: "{{ lookup('k8s', kind='Namespace', resource_name=broker_namespace) }}"
  failed_when: not _broker_namespace
  when: apb_action == 'provision'

- name: 'Set broker objects state={{ state }}'
  k8s_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', item) | from_yaml }}"
  with_items:
    - broker.service.yaml
    - broker.serviceaccount.yaml
    - broker.clusterrolebinding.yaml
    - broker.configmap.yaml
    - broker-auth.clusterrole.yaml
    - broker-auth.clusterrolebinding.yaml
    - broker-client.serviceaccount.yaml
    - broker-client.secret.yaml
    - broker-client.clusterrolebinding.yaml
    - broker-access.clusterrole.yaml

- name: 'Broker auth secret state={{ state }}'
  k8s_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'broker-auth.secret.yaml') | from_yaml }}"
  when: broker_basic_auth_enabled

- include_tasks: "dao_{{ broker_dao_type }}.yaml"

- name: 'Set broker deployment object state={{ state }}'
  openshift_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'broker.deployment.yaml') | from_yaml }}"

- name: 'Set route state={{ state }}'
  openshift_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'broker.route.yaml') | from_yaml }}"
  when: cluster == 'openshift'

# Until we have the dynamic client, we'll have to kubectl create the clusterservicebroker object
# This is because service catalog specific objects are not in either the kubernetes or openshift
# client's models.
- name: Get certificate authority
  shell: "kubectl get secrets -n {{ broker_namespace }} {{ broker_name }}-client -o yaml | grep service-ca.crt | awk '{ print $2 }'"
  register: cluster_ca
  when: apb_action == 'provision'

- name: Set certificate authority
  set_fact:
    broker_ca_crt: "{{ cluster_ca.stdout }}"
  when: apb_action == 'provision'

- name: 'Template out cluster service broker object'
  template:
    src: broker.servicecatalog.yaml
    dest: /tmp/broker.servicecatalog.yaml

- name: 'Use kubectl to {{ kubectl_action }} cluster service broker object'
  command: kubectl {{ kubectl_action }} -f /tmp/broker.servicecatalog.yaml
  register: csb_command
  failed_when: csb_command.rc != 0 and 'AlreadyExists' not in csb_command.stderr and 'NotFound' not in csb_command.stderr

- name: "Wait for deployment to become available"
  debug:
    msg: "Deployment available status: {{ deployment_query }}"
  retries: 12
  delay: 10
  until:
    - deployment_query
  when: cluster == "kubernetes"

- name: "Wait for deployment config to become available"
  debug:
    msg: "DeploymentConfig available status: {{ deployment_config_query }}"
  retries: 12
  delay: 10
  until:
    - deployment_config_query
  when: cluster == "openshift"
