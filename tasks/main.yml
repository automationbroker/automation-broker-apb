---

# These can always be overridden at the command line
# http://docs.ansible.com/ansible/devel/user_guide/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable
- name: 'Set facts'
  set_fact:
    cluster: "{{ _cluster_type }}"
    broker_auto_escalate: "{{ 'true' if _cluster_type == 'kubernetes' else 'false' }}"
    broker_local_openshift_enabled: "{{ 'true' if _cluster_type == 'openshift' else 'false' }}"
  vars:
    _cluster_type: '{{ "openshift" if "openshift" in lookup("k8s", cluster_info="version") else "kubernetes" }}'

- name: Create broker config map
  import_tasks: build_config.yml

- name: Debug important facts
  debug:
    msg:
      - "cluster: {{ cluster }}"
      - "broker_auto_escalate: {{ broker_auto_escalate }}"
      - "broker_local_openshift_enabled: {{ broker_local_openshift_enabled }}"
      - "{{ broker_config | to_nice_yaml }}"

- name: 'Set broker namespace state={{ state }}'
  k8s:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'broker.namespace.yaml') | from_yaml }}"
  when: create_broker_namespace

- name: Verify preconditions
  assert:
    that:
      - '"servicecatalog.k8s.io" in lookup("k8s", cluster_info="api_groups")'
      - 'lookup("k8s", kind="Namespace", resource_name=broker_namespace) is defined'
    msg: |
      Service Catalog must be installed in the cluster
      The broker namespace must exist
  when: state == 'present'

- include_tasks: "dao_{{ broker_config.dao.type }}.yml"
- include_tasks: "generate_certificate.yml"
  when: cluster == 'kubernetes'

- name: 'Set broker config map state={{ state }}'
  k8s:
    state: '{{ state }}'
    definition: '{{ broker_config_map }}'
  register: result


# TODO: Find better way to do this, might not be supported through modules quite yet

- name: Redeploy the broker if the configmap changed
  k8s:
    state: absent
    kind: Pod
    api_version: v1
    namespace: '{{ broker_namespace }}'
    name: '{{ pod.metadata.name }}'
  vars:
    pod: '{{ lookup("k8s", kind="Pod", api_version="v1", namespace=broker_namespace, label_selector=("app=" + broker_name)) }}'
    kind: '{{ "Deployment" if cluster == "kubernetes" else "DeploymentConfig" }}'
    api_version: '{{ "apps/v1" if cluster == "kubernetes" else "apps.openshift.io/v1" }}'
  when:
  - result.changed
  - pod

- name: 'Set broker objects state={{ state }}'
  k8s:
    state: '{{ state }}'
    definition: "{{ lookup('template', item.name) | from_yaml }}"
  when: item.apply | default(True)
  loop:
    - name: broker.service.yaml
    - name: broker.route.yaml
      apply: "{{ True if cluster == 'openshift' else False }}"
    - name: broker.serviceaccount.yaml
    - name: broker.clusterrolebinding.yaml
    - name: broker-auth.clusterrole.yaml
    - name: broker-auth.clusterrolebinding.yaml
    - name: broker-client.serviceaccount.yaml
    - name: broker-client.secret.yaml
    - name: broker-client.clusterrolebinding.yaml
    - name: broker-access.clusterrole.yaml
    - name: broker-auth.secret.yaml
      apply: "{{ (broker_config.broker.auth[0].enabled | default(False)) | bool }}"
    - name: broker.deployment.yaml
    - name: broker.servicecatalog.yaml

- name: Wait for clusterservicebroker to become ready
  debug:
    msg: "Broker ready status: {{ cluster_service_broker_query }}"
  vars:
  retries: 60
  delay: 10
  until: cluster_service_broker_query | length > 0 and cluster_service_broker_query | first == "True"
  when: state == 'present' and wait_for_broker
