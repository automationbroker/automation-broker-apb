---

# These can always be overridden at the command line
# http://docs.ansible.com/ansible/devel/user_guide/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable
- name: 'Set facts'
  set_fact:
    cluster: "{{ _cluster_type }}"
    broker_auto_escalate: "{{ 'true' if _cluster_type == 'kubernetes' else 'false' }}"
    broker_local_openshift_enabled: "{{ 'true' if _cluster_type == 'openshift' else 'false' }}"
  vars:
    _cluster_type: '{{ "openshift" if "openshift" in lookup("k8s", cluster_info="version") else "kubernetes" }}'

- name: Debug important facts
  debug:
    msg:
      - "Cluster: {{ cluster }}"
      - "broker_auto_escalate {{ broker_auto_escalate }}"
      - "broker_local_openshift_enabled {{ broker_local_openshift_enabled }}"

- name: 'Set broker namespace state={{ state }}'
  k8s:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'broker.namespace.yaml') | from_yaml }}"
  when: create_broker_namespace

- name: Verify preconditions
  assert:
    that:
      - '"servicecatalog.k8s.io" in lookup("k8s", cluster_info="api_groups")'
      - 'lookup("k8s", kind="Namespace", resource_name=broker_namespace) is defined'
    msg:
      - Service Catalog must be installed in the cluster
      - The broker namespace must exist
  when: state == 'present'

- name: 'Set broker objects state={{ state }}'
  k8s_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', item) | from_yaml }}"
  with_items:
    - broker.service.yaml
    - broker.serviceaccount.yaml
    - broker.clusterrolebinding.yaml
    - broker.configmap.yaml
    - broker-auth.clusterrole.yaml
    - broker-auth.clusterrolebinding.yaml
    - broker-client.serviceaccount.yaml
    - broker-client.secret.yaml
    - broker-client.clusterrolebinding.yaml
    - broker-access.clusterrole.yaml

- name: 'Broker auth secret state={{ state }}'
  k8s_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'broker-auth.secret.yaml') | from_yaml }}"
  when: broker_basic_auth_enabled

# Handle how the broker saves state
- include_tasks: "dao_{{ broker_dao_type }}.yaml"

- include_tasks: "generate_certificate.yaml"
  when: apb_action == 'provision'

- name: 'Set broker deployment object state={{ state }}'
  openshift_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'broker.deployment.yaml') | from_yaml }}"

- name: 'Set route state={{ state }}'
  openshift_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'broker.route.yaml') | from_yaml }}"
  when: cluster == 'openshift'

# Handle the service-catalog cluster object
# Until we have the dynamic client, we'll have to kubectl create the clusterservicebroker object
# This is because service catalog specific objects are not in either the kubernetes or openshift
# client's models.
- name: 'Template out cluster service broker object'
  template:
    src: broker.servicecatalog.yaml
    dest: /tmp/broker.servicecatalog.yaml

- name: 'Use kubectl to {{ kubectl_action }} cluster service broker object'
  command: kubectl {{ kubectl_action }} -f /tmp/broker.servicecatalog.yaml
  register: csb_command
  failed_when: csb_command.rc != 0 and 'AlreadyExists' not in csb_command.stderr and 'NotFound' not in csb_command.stderr
