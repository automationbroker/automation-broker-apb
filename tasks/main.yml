---

# These can always be overridden at the command line
# http://docs.ansible.com/ansible/devel/user_guide/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable
- name: 'Set facts'
  set_fact:
    cluster: "{{ _cluster_type }}"
    broker_auto_escalate: "{{ 'true' if _cluster_type == 'kubernetes' else 'false' }}"
    broker_local_openshift_enabled: "{{ true if _cluster_type == 'openshift' else false }}"
  vars:
    _cluster_type: '{{ "openshift" if "openshift" in lookup("k8s", cluster_info="version") else "kubernetes" }}'

- name: 'Fail if service-catalog not installed'
  fail:
    msg:
     There is no service catalog api-versions available in this cluster.
     Please install the service catalog and retry.
  when: apb_action == 'provision' and 'servicecatalog.k8s.io' not in lookup("k8s", cluster_info="api_groups")

- name: 'Set broker namespace state={{ state }}'
  openshift_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'broker.namespace.yaml') | from_yaml }}"
  when: create_broker_namespace

- name: 'Get the broker namespace'
  set_fact:
    _broker_namespace: "{{ lookup('k8s', kind='Namespace', resource_name=broker_namespace) }}"
  failed_when: not _broker_namespace
  when: apb_action == 'provision'

- name: 'Set broker objects state={{ state }}'
  k8s_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', item) | from_yaml }}"
  with_items:
    - broker.service.yaml
    - broker.serviceaccount.yaml
    - broker.clusterrolebinding.yaml
    - broker.configmap.yaml
    - broker-auth.clusterrole.yaml
    - broker-auth.clusterrolebinding.yaml
    - broker-client.serviceaccount.yaml
    - broker-client.secret.yaml
    - broker-client.clusterrolebinding.yaml
    - broker-access.clusterrole.yaml
    - '{{ "broker-auth.secret.yaml" if broker_basic_auth_enabled else "SKIP" }}'
  when: item != "SKIP"

# Handle how the broker saves state
- include_tasks: "dao_{{ broker_dao_type }}.yaml"

- include_tasks: "generate_certificate.yaml"
  when: apb_action == 'provision'

- name: 'Set broker deployment object state={{ state }}'
  openshift_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'broker.deployment.yaml') | from_yaml }}"

- name: 'Set route state={{ state }}'
  openshift_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'broker.route.yaml') | from_yaml }}"
  when: cluster == 'openshift'

- name: 'Set ClusterServiceBroker state={{ state }}'
  k8s:
    definition: "{{ lookup('template', 'broker.servicecatalog.yaml') | from_yaml }}"
    state: '{{ state }}'
